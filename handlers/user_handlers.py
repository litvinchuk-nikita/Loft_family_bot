from datetime import datetime, date, timedelta
import time
from config_data.config import Config, load_config
from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state, State, StatesGroup
from aiogram.filters import Command, CommandStart, Text, StateFilter
from aiogram.types import CallbackQuery, Message, URLInputFile, InputMediaPhoto, ContentType
from database.database import (insert_event, select_all_events, select_one_event, delete_event, insert_user, select_all_users,
                               select_users_id, insert_registr, select_all_registr, insert_card, select_all_cards, select_cards_number,
                               delete_card, select_one_card, select_user_id_registr, select_user, select_one_user, insert_booking_table,
                               select_booking_table, select_survey, insert_survey, insert_id, select_id, select_all_ids, select_one_event_id)
from keyboards.other_kb import (create_menu_kb, create_date_kb, create_date_kb_2, create_backword_menu_kb,          create_yes_no_kb, create_cancel_registr_kb,
                                create_cancel_addevent_kb, create_cancel_show_kb, create_cancel_booking_kb, create_cancel_card_kb, create_cancel_newslatter_kb,
                                create_question_kb, create_question_2_kb, create_question_3_kb, create_cancel_addbooking_kb, create_cancel_delete_card_kb,
                                create_cancel_deleteevent_kb, create_cancel_survey_kb)
from lexicon.lexicon import LEXICON
from filters.filters import IsAdmin, IsSecurity
from services.file_handling import date_func, check_date, check_phone, now_time, next_day_date, next_day_date_2

router: Router = Router()


# –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é config
config: Config = load_config()



# —ç—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start" -
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–º—É —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
@router.message(CommandStart(), StateFilter(default_state))
async def process_start_cammand(message: Message, bot: Bot):
    ids_list = select_id()
    if str(message.from_user.id) not in ids_list:
        insert_id(message.from_user.id)
    photo = URLInputFile(url=LEXICON['menu_photo'])
    await message.answer_photo(
        photo=photo,
        reply_markup=create_menu_kb(),
        parse_mode='HTML')


# —ç—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/help"
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤ –±–æ—Ç–µ
@router.message(Command(commands='help'))
async def process_help_command(message: Message):
    if message.from_user.id in config.tg_bot.admin_ids:
        await message.answer(LEXICON['/help_admin'], reply_markup=create_backword_menu_kb(), parse_mode='HTML')
    elif message.from_user.id in config.tg_bot.security_ids:
        await message.answer(LEXICON['/help_security'], reply_markup=create_backword_menu_kb(), parse_mode='HTML')
    else:
        await message.answer(LEXICON['/help'], reply_markup=create_backword_menu_kb(), parse_mode='HTML')


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
# –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
@router.callback_query(Text(text='backword_menu'), StateFilter(default_state))
async def process_backward_press(callback: CallbackQuery):
    photo = URLInputFile(url=LEXICON['menu_photo'])
    await callback.message.delete()
    await callback.message.answer_photo(
        photo=photo,
        reply_markup=create_menu_kb(),
        parse_mode='HTML')


# —ç—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å"
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª—É–±–µ
@router.callback_query(Text(text='info'), StateFilter(default_state))
async def process_help_command(callback: CallbackQuery):
    await callback.message.delete()
    photo = URLInputFile(url=LEXICON['menu_photo'])
    text = LEXICON['info']
    await callback.message.answer_photo(photo=photo, caption=text,
                                  reply_markup=create_backword_menu_kb())







                                # –§–£–ù–ö–¶–ò–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ù–ê –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ï









class FSMFillForm(StatesGroup):
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–∞ State, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    # –ø–µ—Ä–µ—á–∏—Å–ª—è—è –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è
    # –±–æ—Ç –≤ —Ä–∞–∑–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    event_choosing = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    fill_first_name = State()   # C–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    fill_last_name = State()       # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏
    fill_bd = State()       # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    fill_phone = State()       # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    verification_form = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–æ–π —Ñ–æ—Ä–º—ã
    section_choosing = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π



# —ç—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã
@router.callback_query(Text(text='registr'), StateFilter(default_state))
async def process_help_command(callback: CallbackQuery, state: FSMContext):
    events_list = []
    id_list = []
    num = 1
    events = select_all_events()
    if len(events) != 0:
        for event in events:
            try:
                if now_time(f'{event["date"]} 22:00') < datetime.now():
                    continue
                events_list.append(f'{num}) "{event["name"]}"\n{event["description"]}\n'
                            f'–î–∞—Ç–∞: {event["date"]}\n'
                            f'<b>–ö–û–î –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø üëâüèª {event["id"]}</b>')
                id_list.append(event["id"])
            except:
                print(f"–ü—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {Exception.__class__}")
            num += 1
        if len(events_list) == 0:
            await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç—É –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.")
        else:
            events = f'\n\n'.join(events_list)
            text = f"<b>–í–´–ë–ï–†–ò–¢–ï –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ï</b>\n\n{events}\n\n<i>–ß–¢–û–ë–´ –í–´–ë–†–ê–¢–¨ –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ï –í–í–ï–î–ò–¢–ï –ö–û–î –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø</i>‚ùóÔ∏è"
            await callback.message.answer(text=text, reply_markup=create_cancel_registr_kb(), parse_mode='HTML')
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            await state.set_state(FSMFillForm.event_choosing)
            await state.update_data(id_list=id_list)
    else:
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.")


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@router.message(StateFilter(FSMFillForm.event_choosing), lambda x: x.text.isdigit())
async def process_event_choosing(message: Message, state: FSMContext):
    db = await state.get_data()
    id_list = db['id_list']
    if int(message.text) in id_list:
        event = select_one_event(message.text)
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–º
        # –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç—É, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é —Ñ–æ—Ä–º—ã
        users = select_users_id()
        if str(message.from_user.id) in users:
            user = select_one_user(message.from_user.id)
            insert_registr(user['id'], event['id'])
            await message.answer_photo(photo=event['photo'], caption=f'<b>{user["first_name"]} {user["last_name"]}</b>, –≤—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: <b>"{event["name"]}"</b>\n–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: <b>{event["date"]}</b>\n\n–ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—Ö–æ–¥–µ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏, –¥–æ –≤—Å—Ç—Ä–µ—á–∏ :)', parse_mode='HTML')
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
            await state.clear()
        else:
            id = event['id']
            user_id = message.from_user.id
            await state.update_data(event_id=id, user_id=user_id)
            await message.answer(text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: "{event["name"]}"\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è', reply_markup=create_cancel_registr_kb())
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
            await state.set_state(FSMFillForm.fill_first_name)
    else:
        await message.answer(text=f'–í–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω—ã–π –∫–æ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup=create_cancel_registr_kb())



# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è
# –≤—ã–±–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@router.message(StateFilter(FSMFillForm.event_choosing))
async def warning_not_event(message: Message):
    await message.answer(
        text=f'–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', reply_markup=create_cancel_registr_kb())


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ –∏–º—è
@router.message(StateFilter(FSMFillForm.fill_first_name), lambda x: x.text.isalpha())
async def process_fill_first_name(message: Message, state: FSMContext):
    # C–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ –ø–∞–º—è—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    first_name = message.text
    await state.update_data(first_name=first_name)
    db = await state.get_data()
    if 'phone' in db.keys():
        await message.answer(text=f'–ò–º—è:{db["first_name"]}\n–§–∞–º–∏–ª–∏—è:{db["last_name"]}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:{db["birthday"]}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:{db["phone"]}\n\n–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã –≤–µ—Ä–Ω–æ ?', reply_markup=create_yes_no_kb())
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–∫–µ—Ç—ã
        await state.set_state(FSMFillForm.verification_form)
    else:
        await message.answer(text=f'–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é', reply_markup=create_cancel_registr_kb())
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏
        await state.set_state(FSMFillForm.fill_last_name)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è
# –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@router.message(StateFilter(FSMFillForm.fill_first_name))
async def warning_fill_first_name(message: Message):
    await message.answer(
        text=f'–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –µ—â–µ —Ä–∞–∑', reply_markup=create_cancel_registr_kb())


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–æ —Ñ–∞–º–∏–ª–∏—è
@router.message(StateFilter(FSMFillForm.fill_last_name), lambda x: x.text.isalpha())
async def process_fill_last_name(message: Message, state: FSMContext):
    # C–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–º–∏–ª–∏—é –≤ –ø–∞–º—è—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    last_name = message.text
    await state.update_data(last_name=last_name)
    db = await state.get_data()
    if 'phone' in db.keys():
        await message.answer(text=f'–ò–º—è:{db["first_name"]}\n–§–∞–º–∏–ª–∏—è:{db["last_name"]}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:{db["birthday"]}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:{db["phone"]}\n\n–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã –≤–µ—Ä–Ω–æ ?', reply_markup=create_yes_no_kb())
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–∫–µ—Ç—ã
        await state.set_state(FSMFillForm.verification_form)
    else:
        await message.answer(text=f'–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yyyy', reply_markup=create_cancel_registr_kb())
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
        await state.set_state(FSMFillForm.fill_bd)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è
# –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏ –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@router.message(StateFilter(FSMFillForm.fill_last_name))
async def warning_fill_last_name(message: Message):
    await message.answer(
        text=f'–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –µ—â–µ —Ä–∞–∑', reply_markup=create_cancel_registr_kb())


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–æ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
@router.message(StateFilter(FSMFillForm.fill_bd))
async def process_fill_birthday(message: Message, state: FSMContext):
    if check_date(message.text):
        # C–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        birthday = message.text
        await state.update_data(birthday=birthday)
        db = await state.get_data()
        if 'phone' in db.keys():
            await message.answer(text=f'–ò–º—è:{db["first_name"]}\n–§–∞–º–∏–ª–∏—è:{db["last_name"]}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:{db["birthday"]}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:{db["phone"]}\n\n–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã –≤–µ—Ä–Ω–æ ?', reply_markup=create_yes_no_kb())
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–∫–µ—Ç—ã
            await state.set_state(FSMFillForm.verification_form)
        else:
            await message.answer(text=f'–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 89997776655', reply_markup=create_cancel_registr_kb())
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            await state.set_state(FSMFillForm.fill_phone)
    else:
        await message.answer(text=f'–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yyyy, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –µ—â–µ —Ä–∞–∑', reply_markup=create_cancel_registr_kb())


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è
# –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@router.message(StateFilter(FSMFillForm.fill_bd))
async def warning_fill_birthday(message: Message):
    await message.answer(text=f'–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yyyy, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –µ—â–µ —Ä–∞–∑', reply_markup=create_cancel_registr_kb())


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(StateFilter(FSMFillForm.fill_phone))
async def process_fill_phone(message: Message, state: FSMContext):
    if check_phone(message.text):
        # C–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ø–∞–º—è—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        phone = message.text
        await state.update_data(phone=phone)
        db = await state.get_data()
        await message.answer(text=f'–ò–º—è:{db["first_name"]}\n–§–∞–º–∏–ª–∏—è:{db["last_name"]}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:{db["birthday"]}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:{db["phone"]}\n\n–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã –≤–µ—Ä–Ω–æ ?', reply_markup=create_yes_no_kb())
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–∫–µ—Ç—ã
        await state.set_state(FSMFillForm.verification_form)
    else:
        await message.answer(text=f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–Ω–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 89997776655, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –µ—â–µ —Ä–∞–∑', reply_markup=create_cancel_registr_kb())


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è
# –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@router.message(StateFilter(FSMFillForm.fill_phone))
async def warning_fill_phone(message: Message):
    await message.answer(text=f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–Ω–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 89997776655, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –µ—â–µ —Ä–∞–∑', reply_markup=create_cancel_registr_kb())


# —ç—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–¥–∞" –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
# –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞—á–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.callback_query(Text(text='yes'), StateFilter(FSMFillForm.verification_form))
async def process_yes_button(callback: CallbackQuery, state: FSMContext):
    # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db = await state.get_data()
    insert_user(db['user_id'], db['first_name'], db['last_name'], db['birthday'], db['phone'])
    user = select_one_user(db['user_id'])
    # –¥–æ–±–∞–≤–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    insert_registr(user['id'], db['event_id'])
    event = select_one_event(db['event_id'])
    await callback.message.delete()
    await callback.message.answer_photo(photo=event['photo'], caption=f'<b>{user["first_name"]} {user["last_name"]}</b>, –≤—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: <b>"{event["name"]}"</b>\n–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: <b>{event["date"]}</b>\n\n–ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—Ö–æ–¥–µ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏, –¥–æ –≤—Å—Ç—Ä–µ—á–∏ :)', parse_mode='HTML')
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.clear()


# —ç—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–µ—Ç" –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
# –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π
@router.callback_query(Text(text='no'), StateFilter(FSMFillForm.verification_form))
async def process_yes_button(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n1 - –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è;\n2 - –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é;\n3 - –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è;\n4 - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞;', reply_markup=create_cancel_registr_kb())
    await state.set_state(FSMFillForm.section_choosing)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–∞–∑–¥–µ–ª–∞, –≤ –∫–æ—Ç—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
@router.message(StateFilter(FSMFillForm.section_choosing), lambda x: x.text.isdigit() and 1 <= int(x.text) <= 4)
async def process_fill_phone(message: Message, state: FSMContext):
    db = await state.get_data()
    if int(message.text) == 1:
        await message.answer(f'–¢–µ–∫—É—â–µ–µ –∏–º—è: {db["first_name"]}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è', reply_markup=create_cancel_registr_kb())
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
        await state.set_state(FSMFillForm.fill_first_name)
    elif int(message.text) == 2:
        await message.answer(f'–¢–µ–∫—É—â–∞—è —Ñ–∞–º–∏–ª–∏—è: {db["last_name"]}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é', reply_markup=create_cancel_registr_kb())
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏
        await state.set_state(FSMFillForm.fill_last_name)
    elif int(message.text) == 3:
        await message.answer(f'–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {db["birthday"]}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ–º–∞—Ç–µ dd.mm.yyyy', reply_markup=create_cancel_registr_kb())
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
        await state.set_state(FSMFillForm.fill_bd)
    elif int(message.text) == 4:
        await message.answer(f'–¢–µ–∫—É—â—É–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {db["phone"]}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=create_cancel_registr_kb())
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await state.set_state(FSMFillForm.fill_phone)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è
# –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@router.message(StateFilter(FSMFillForm.section_choosing))
async def warning_fill_phone(message: Message):
    await message.answer(text=f'–î–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ 4', reply_markup=create_cancel_registr_kb())


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è
# –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–∫–µ—Ç—ã –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@router.message(StateFilter(FSMFillForm.verification_form))
async def warning_fill_phone(message: Message):
    await message.answer(text=f'–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–∞/–Ω–µ—Ç', reply_markup=create_cancel_registr_kb())


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
# –∏ –æ—Ç–º–µ–Ω—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
@router.callback_query(Text(text='cancel_registr'), StateFilter(FSMFillForm))
async def process_cancel_press(callback: CallbackQuery, state: FSMContext):
    photo = URLInputFile(url=LEXICON['menu_photo'])
    await callback.message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–∞')
    await callback.message.delete()
    await callback.message.answer_photo(
        photo=photo,
        reply_markup=create_menu_kb(),
        parse_mode='HTML')
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.clear()







                                    # –§–£–ù–ö–¶–ò–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø






class FSMAdmin(StatesGroup):
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–∞ State, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    # –ø–µ—Ä–µ—á–∏—Å–ª—è—è –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è
    # –±–æ—Ç –≤ —Ä–∞–∑–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    add_event = State()       # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    add_photo_event = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–ª–µ–Ω–∏—è –∞—Ñ–∏—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    delete_event = State()    # –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è



# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥—ã /addevent
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —á–∞—Ç –ø—Ä–∞–≤–∏–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@router.message(Command(commands='addevent'), StateFilter(default_state), IsAdmin(config.tg_bot.admin_ids))
async def process_addevent_command(message: Message, state: FSMContext):
    await message.answer(text=LEXICON['add'], reply_markup=create_cancel_addevent_kb())
    await state.set_state(FSMAdmin.add_event)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ
@router.message(IsAdmin(config.tg_bot.admin_ids), StateFilter(FSMAdmin.add_event))
async def process_add_event(message: Message, state: FSMContext):
    add_list = [i.strip() for i in message.text.split(';')]
    if len(add_list) == 3:
        error = 0
        if '"' in add_list[0] or "'" in add_list[0]:
            await message.answer('–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–æ–≤—ã—á–µ–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ', reply_markup=create_cancel_addevent_kb())
            error += 1
        if not check_date(add_list[1]):
            await message.answer(f'–î–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ –≤ –≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\ndd.mm.yyyy', reply_markup=create_cancel_addevent_kb())
            error += 1
        if '"' in add_list[2] or "'" in add_list[2]:
            await message.answer('–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–æ–≤—ã—á–µ–∫ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ', reply_markup=create_cancel_addevent_kb())
            error += 1
        if error == 0:
            await message.answer(f'–î–æ–±–∞–≤—å—Ç–µ –∞—Ñ–∏—à—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n', reply_markup=create_cancel_addevent_kb())
            await state.update_data(add_list=add_list)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–±–∞–ª–µ–Ω–∏—è –∞—Ñ–∏—à–∏
            await state.set_state(FSMAdmin.add_photo_event)
    else:
        await message.answer(f'–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã\n'
                             f'–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å ; –≤ –∫–æ–Ω—Ü–µ –æ–¥–Ω–æ–≥–æ –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤ –∏–ª–∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∏—à–Ω–∏–π –∑–Ω–∞–∫ ;\n'
                             f'–°—Ä–∞–≤–Ω–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —à–∞–±–ª–æ–Ω–æ–º –∏ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏\n\n',
                             reply_markup=create_cancel_addevent_kb())


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
@router.message(IsAdmin(config.tg_bot.admin_ids), StateFilter(FSMAdmin.add_photo_event))
async def process_add_event(message: Message, state: FSMContext):
    if message.photo:
        db = await state.get_data()
        add_list = db['add_list']
        photo = message.photo[0].file_id
        insert_event(add_list[0], add_list[1], add_list[2], photo)
        await message.answer('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ')
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.clear()
    else:
        await message.answer(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–∞—Ä—Ç–∏–Ω–∫–æ–π, –æ—Ç–ø—Ä–∞–≤—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∞—Ñ–∏—à–∏\n', reply_markup=create_cancel_addevent_kb())



# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
# –∏ –æ—Ç–º–µ–Ω—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
@router.callback_query(Text(text='cancel_addevent'), StateFilter(FSMAdmin))
async def process_cancel_press(callback: CallbackQuery, state: FSMContext):
    photo = URLInputFile(url=LEXICON['menu_photo'])
    await callback.message.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ')
    await callback.message.delete()
    await callback.message.answer_photo(
        photo=photo,
        reply_markup=create_menu_kb(),
        parse_mode='HTML')
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.clear()







                                # –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è






# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥—ã /deleteevent
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —á–∞—Ç –ø—Ä–∞–≤–∏–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@router.message(Command(commands='deleteevent'), StateFilter(default_state), IsAdmin(config.tg_bot.admin_ids))
async def process_addevent_command(message: Message, state: FSMContext):
    events_list = []
    id_list = []
    num = 1
    events = select_all_events()
    if len(events) != 0:
        for event in events:
            try:
                if now_time(f'{event["date"]} 22:00') < datetime.now():
                    continue
                events_list.append(f'{num}) "{event["name"]}"\n{event["description"]}\n'
                            f'–î–∞—Ç–∞: {event["date"]}\n'
                            f'<b>–ö–û–î –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø üëâüèª {event["id"]}</b>')
                id_list.append(event["id"])
            except:
                print(f"–ü—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {Exception.__class__}")
            num += 1
        if len(events_list) == 0:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç—É –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.")
        else:
            events = f'\n\n'.join(events_list)
            text = f"{events}\n\n<i>–ß–¢–û–ë–´ –£–î–ê–õ–ò–¢–¨ –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ï –í–í–ï–î–ò–¢–ï –ö–û–î –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø</i>‚ùóÔ∏è"
            await message.answer(text=text, reply_markup=create_cancel_deleteevent_kb(), parse_mode='HTML')
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            await state.set_state(FSMAdmin.delete_event)
            await state.update_data(id_list=id_list)
    else:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.")


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ
@router.message(IsAdmin(config.tg_bot.admin_ids), StateFilter(FSMAdmin.delete_event), lambda x: x.text.isdigit())
async def process_delete_event(message: Message, state: FSMContext):
    db = await state.get_data()
    id_list = db['id_list']
    if int(message.text) in id_list:
        delete_event(int(message.text))
        await message.answer('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ')
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.clear()
    else:
        await message.answer(text=f'–í–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω—ã–π –∫–æ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup=create_cancel_deleteevent_kb())



# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è
# –≤—ã–±–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@router.message(StateFilter(FSMAdmin.delete_event))
async def warning_not_event(message: Message):
    await message.answer(
        text=f'–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', reply_markup=create_cancel_deleteevent_kb())




# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
# –∏ –æ—Ç–º–µ–Ω—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
@router.callback_query(Text(text='cancel_deleteevent'), StateFilter(FSMAdmin))
async def process_cancel_press(callback: CallbackQuery, state: FSMContext):
    photo = URLInputFile(url=LEXICON['menu_photo'])
    await callback.message.answer('–£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ')
    await callback.message.delete()
    await callback.message.answer_photo(
        photo=photo,
        reply_markup=create_menu_kb(),
        parse_mode='HTML')
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.clear()










                                # –§–£–ù–ö–¶–ò–Ø –ü–†–û–°–ú–û–¢–†–ê –í–°–ï–• –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–ù–´–•



# —ç—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /show_all_registr
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã
@router.message(Command(commands='show_all_registr'), StateFilter(default_state))
async def process_show_all_registr_command(message: Message):
    if message.from_user.id in config.tg_bot.admin_ids:
        all_registr = select_all_users()
        user_list = []
        num = 1
        for user in all_registr:
            user_list.append(f'{num}) <b>–ò–º—è</b>: {user["first_name"]}\n<b>–§–∞–º–∏–ª–∏—è</b>: {user["last_name"]}\n<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</b>: {user["birthday"]}\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>: {user["phone"]}')
            num += 1
        num_1 = 1
        for user in user_list:
            await message.answer(text=user, parse_mode='HTML')
            num_1 += 1
            if num_1 % 50 == 0:
                time.sleep(6)




                                # –§–£–ù–ö–¶–ò–Ø –ü–†–û–°–ú–û–¢–†–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ù–ê –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ï









class FSMShowRegistr(StatesGroup):
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–∞ State, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    # –ø–µ—Ä–µ—á–∏—Å–ª—è—è –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è
    # –±–æ—Ç –≤ —Ä–∞–∑–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    event_choosing = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è



# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä"
# –∏ –æ—Ç–º–µ–Ω—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
@router.callback_query(Text(text='cancel_show'), StateFilter(FSMShowRegistr))
async def process_cancel_press(callback: CallbackQuery, state: FSMContext):
    photo = URLInputFile(url=LEXICON['menu_photo'])
    await callback.message.answer('–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω')
    await callback.message.delete()
    await callback.message.answer_photo(
        photo=photo,
        reply_markup=create_menu_kb(),
        parse_mode='HTML')
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.clear()



# —ç—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /showregistr
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã
@router.message(Command(commands='showregistr'), StateFilter(default_state))
async def process_showregistr_command(message: Message, state: FSMContext):
    if message.from_user.id in config.tg_bot.admin_ids or message.from_user.id in config.tg_bot.security_ids:
        events_list = []
        id_list = []
        num = 1
        events = select_all_events()
        if len(events) != 0:
            for event in events:
                try:
                    if next_day_date() >= now_time(f'{event["date"]} 00:00'):
                        continue
                    events_list.append(f'{num}) "{event["name"]}"\n{event["description"]}\n'
                                f'–î–∞—Ç–∞: {event["date"]}\n'
                                f'<b>–ö–û–î –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø üëâüèª {event["id"]}</b>')
                    id_list.append(event["id"])
                except:
                    print(f"–ü—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {Exception.__class__}")
                num += 1
            if len(events_list) == 0:
                await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç—É –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.")
            else:
                if len(events_list) <= 20:
                    events = f'\n\n'.join(events_list)
                    text = f"<b>–í–´–ë–ï–†–ò–¢–ï –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ï</b>\n\n{events}\n\n<i>–ß–¢–û–ë–´ –í–´–ë–†–ê–¢–¨ –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ï –í–í–ï–î–ò–¢–ï –ö–û–î –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø</i>‚ùóÔ∏è"
                    await message.answer(text=text, reply_markup=create_cancel_show_kb(),parse_mode='HTML')
                elif len(events_list) >= 21 and len(events_list) <= 40:
                    events_1 = f'\n\n'.join(events_list[0:20])
                    events_2 = f'\n\n'.join(events_list[20:])
                    text_1 = f"<b>–í–´–ë–ï–†–ò–¢–ï –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ï</b>\n\n{events_1}"
                    text_2 = f"{events_2}\n\n<i>–ß–¢–û–ë–´ –í–´–ë–†–ê–¢–¨ –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ï –í–í–ï–î–ò–¢–ï –ö–û–î –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø</i>‚ùóÔ∏è"
                    await message.answer(text=text_1,parse_mode='HTML')
                    await message.answer(text=text_2, reply_markup=create_cancel_show_kb(),parse_mode='HTML')
                elif len(events_list) >= 41 and len(events_list) <= 60:
                    events_1 = f'\n\n'.join(events_list[0:20])
                    events_2 = f'\n\n'.join(events_list[20:40])
                    events_3 = f'\n\n'.join(events_list[40:])
                    text_1 = f"<b>–í–´–ë–ï–†–ò–¢–ï –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ï</b>\n\n{events_1}"
                    text_2 = f"{events_2}"
                    text_3 = f"{events_3}\n\n<i>–ß–¢–û–ë–´ –í–´–ë–†–ê–¢–¨ –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ï –í–í–ï–î–ò–¢–ï –ö–û–î –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø</i>‚ùóÔ∏è"
                    await message.answer(text=text_1, parse_mode='HTML')
                    await message.answer(text=text_2, parse_mode='HTML')
                    await message.answer(text=text_3, reply_markup=create_cancel_show_kb(),parse_mode='HTML')
                elif len(events_list) >= 61 and len(events_list) <= 80:
                    events_1 = f'\n\n'.join(events_list[0:20])
                    events_2 = f'\n\n'.join(events_list[20:40])
                    events_3 = f'\n\n'.join(events_list[40:60])
                    events_4 = f'\n\n'.join(events_list[60:])
                    text_1 = f"<b>–í–´–ë–ï–†–ò–¢–ï –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ï</b>\n\n{events_1}"
                    text_2 = f"{events_2}"
                    text_3 = f"{events_3}"
                    text_4 = f"{events_4}\n\n<i>–ß–¢–û–ë–´ –í–´–ë–†–ê–¢–¨ –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ï –í–í–ï–î–ò–¢–ï –ö–û–î –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø</i>‚ùóÔ∏è"
                    await message.answer(text=text_1, parse_mode='HTML')
                    await message.answer(text=text_2, parse_mode='HTML')
                    await message.answer(text=text_3, parse_mode='HTML')
                    await message.answer(text=text_4, reply_markup=create_cancel_show_kb(),parse_mode='HTML')
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                await state.set_state(FSMShowRegistr.event_choosing)
                await state.update_data(id_list=id_list)
        else:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.")
    else:
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –¥–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç")


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@router.message(StateFilter(FSMShowRegistr.event_choosing), lambda x: x.text.isdigit())
async def process_event_choosing(message: Message, state: FSMContext):
    db = await state.get_data()
    id_list = db['id_list']
    if int(message.text) in id_list:
        registr_user_id = select_user_id_registr(message.text)
        event = select_one_event(message.text)
        user_list = []
        num = 1
        for id in registr_user_id:
            user = select_user(id)
            if message.from_user.id in config.tg_bot.admin_ids:
                user_list.append(f'{num}) <b>–ò–º—è</b>: {user["first_name"]}\n<b>–§–∞–º–∏–ª–∏—è</b>: {user["last_name"]}\n<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</b>: {user["birthday"]}\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>: {user["phone"]}')
            elif message.from_user.id in config.tg_bot.security_ids:
                user_list.append(f'{num}) <b>–ò–º—è</b>: {user["first_name"]}\n<b>–§–∞–º–∏–ª–∏—è</b>: {user["last_name"]}')
            num += 1
        if len(user_list) != 0:
            if len(user_list) <= 30:
                all_user = f'\n\n'.join(user_list)
                await message.answer(f'–ù–∞ {event["name"]} –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å:\n\n{all_user}', reply_markup=create_backword_menu_kb(), parse_mode='HTML')
                await state.clear()
            elif len(user_list) >= 31 and len(user_list) <= 60:
                all_user_1 = f'\n\n'.join(user_list[0:30])
                all_user_2 = f'\n\n'.join(user_list[30:])
                await message.answer(f'–ù–∞ {event["name"]} –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å:\n\n{all_user_1}', parse_mode='HTML')
                await message.answer(f'{all_user_2}', reply_markup=create_backword_menu_kb(), parse_mode='HTML')
                await state.clear()
            elif len(user_list) >= 61 and len(user_list) <= 90:
                all_user_1 = f'\n\n'.join(user_list[0:30])
                all_user_2 = f'\n\n'.join(user_list[30:60])
                all_user_3 = f'\n\n'.join(user_list[60:])
                await message.answer(f'–ù–∞ {event["name"]} –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å:\n\n{all_user_1}', parse_mode='HTML')
                await message.answer(f'{all_user_2}', parse_mode='HTML')
                await message.answer(f'{all_user_3}', reply_markup=create_backword_menu_kb(), parse_mode='HTML')
                await state.clear()
            elif len(user_list) >= 91 and len(user_list) <= 120:
                all_user_1 = f'\n\n'.join(user_list[0:30])
                all_user_2 = f'\n\n'.join(user_list[30:60])
                all_user_3 = f'\n\n'.join(user_list[60:90])
                all_user_4 = f'\n\n'.join(user_list[90:])
                await message.answer(f'–ù–∞ {event["name"]} –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å:\n\n{all_user_1}', parse_mode='HTML')
                await message.answer(f'{all_user_2}', parse_mode='HTML')
                await message.answer(f'{all_user_3}', parse_mode='HTML')
                await message.answer(f'{all_user_4}', reply_markup=create_backword_menu_kb(), parse_mode='HTML')
                await state.clear()
        else:
            await message.answer(f'–ù–∞ {event["name"]} –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–æ—Å—å', reply_markup=create_backword_menu_kb())
            await state.clear()
    else:
        await message.answer(text=f'–í–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω—ã–π –∫–æ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup=create_cancel_show_kb())


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è
# –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–∫–µ—Ç—ã –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@router.message(StateFilter(FSMShowRegistr))
async def warning_show_registr(message: Message):
    await message.answer(text=f'–í–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω—ã–π –∫–æ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup=create_cancel_show_kb())






                                    # –§–£–ù–ö–¶–ò–Ø –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø –°–¢–û–õ–ò–ö–ê







class FSMBooking(StatesGroup):
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–∞ State, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    # –ø–µ—Ä–µ—á–∏—Å–ª—è—è –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è
    # –±–æ—Ç –≤ —Ä–∞–∑–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    date_choosing = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    fill_guest = State()   # C–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ—Å—Ç–µ–π
    fill_first_name = State()   # C–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    fill_last_name = State()       # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏
    fill_bd = State()       # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    fill_phone = State()       # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    verification_form = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–æ–π —Ñ–æ—Ä–º—ã
    section_choosing = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
# –∏ –æ—Ç–º–µ–Ω—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏–∫–∞
@router.callback_query(Text(text='cancel_booking'), StateFilter(FSMBooking))
async def process_cancel_press(callback: CallbackQuery, state: FSMContext):
    photo = URLInputFile(url=LEXICON['menu_photo'])
    await callback.message.answer('–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
    await callback.message.delete()
    await callback.message.answer_photo(
        photo=photo,
        reply_markup=create_menu_kb(),
        parse_mode='HTML')
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.clear()


# —ç—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫"
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã
@router.callback_query(Text(text='booking'))
async def process_booking_press(callback: CallbackQuery, state: FSMContext):
    date_list = date_func()
    await callback.message.delete()
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫:', reply_markup=create_date_kb(date_list))
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    await state.set_state(FSMBooking.date_choosing)




# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–æ–π
# –≤–æ –≤—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞—Ç—ã –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
@router.callback_query(Text(text=['date_1', 'date_2', 'date_3', 'date_4', 'date_5', 'date_6', 'date_7']),
                        StateFilter(FSMBooking.date_choosing))
async def process_date_press(callback: CallbackQuery, state: FSMContext):
    date = callback.message.reply_markup.inline_keyboard[int(callback.data.split("_")[1]) - 1][0].text
    await state.update_data(date=date, user_id=callback.from_user.id)
    await callback.message.delete()
    await callback.message.answer(f'–ù–∞ –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Ç—Å–≤–æ –≥–æ—Å—Ç–µ–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ ?', reply_markup=create_cancel_booking_kb(), parse_mode='HTML')
    await state.set_state(FSMBooking.fill_guest)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è
# –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–∫–µ—Ç—ã –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@router.message(StateFilter(FSMBooking.date_choosing))
async def warning_date_choosing(message: Message):
    await message.answer(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω–∏—Ç—å', reply_markup=create_cancel_booking_kb())



# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@router.message(StateFilter(FSMBooking.fill_guest), lambda x: x.text.isdigit())
async def process_fill_guest(message: Message, state: FSMContext, bot: Bot):
    guest = message.text
    users = select_users_id()
    db = await state.get_data()
    if str(message.from_user.id) in users:
        user = select_one_user(message.from_user.id)
        await message.answer(f'–ó–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏üôÇ', parse_mode='HTML')
        for id in config.tg_bot.admin_ids:
            await bot.send_message(id, f'<b>{user["first_name"]} {user["last_name"]}</b> –æ—Å—Ç–∞–≤–∏–ª(–∞) –∑–∞—è–≤–∫—É –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∏–∫–∞ {db["date"]} –Ω–∞ {guest} –≥–æ—Å—Ç–µ–π\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user["phone"]}\n–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user["id"]}', parse_mode='HTML')
        await state.clear()
    else:
        await message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É - {db["date"]}\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è', reply_markup=create_cancel_booking_kb())
        await state.update_data(guest=guest)
        await state.set_state(FSMBooking.fill_first_name)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è
# –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@router.message(StateFilter(FSMBooking.fill_guest))
async def warning_fill_guest(message: Message):
    await message.answer(
        text=f'–ö–æ–ª–∏—á–µ—Ç—Å–≤–æ –≥–æ—Å—Ç–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –µ—â–µ —Ä–∞–∑', reply_markup=create_cancel_booking_kb())




# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ –∏–º—è
@router.message(StateFilter(FSMBooking.fill_first_name), lambda x: x.text.isalpha())
async def process_fill_first_name(message: Message, state: FSMContext):
    # C–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ –ø–∞–º—è—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    first_name = message.text
    await state.update_data(first_name=first_name)
    db = await state.get_data()
    if 'phone' in db.keys():
        await message.answer(text=f'–ò–º—è:{db["first_name"]}\n–§–∞–º–∏–ª–∏—è:{db["last_name"]}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:{db["birthday"]}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:{db["phone"]}\n\n–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã –≤–µ—Ä–Ω–æ ?', reply_markup=create_yes_no_kb())
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–∫–µ—Ç—ã
        await state.set_state(FSMBooking.verification_form)
    else:
        await message.answer(text=f'–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é', reply_markup=create_cancel_booking_kb())
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏
        await state.set_state(FSMBooking.fill_last_name)





# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è
# –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@router.message(StateFilter(FSMBooking.fill_first_name))
async def warning_fill_first_name(message: Message):
    await message.answer(
        text=f'–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –µ—â–µ —Ä–∞–∑', reply_markup=create_cancel_booking_kb())




# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–æ —Ñ–∞–º–∏–ª–∏—è
@router.message(StateFilter(FSMBooking.fill_last_name), lambda x: x.text.isalpha())
async def process_fill_last_name(message: Message, state: FSMContext):
    # C–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–º–∏–ª–∏—é –≤ –ø–∞–º—è—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    last_name = message.text
    await state.update_data(last_name=last_name)
    db = await state.get_data()
    if 'phone' in db.keys():
        await message.answer(text=f'–ò–º—è:{db["first_name"]}\n–§–∞–º–∏–ª–∏—è:{db["last_name"]}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:{db["birthday"]}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:{db["phone"]}\n\n–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã –≤–µ—Ä–Ω–æ ?', reply_markup=create_yes_no_kb())
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–∫–µ—Ç—ã
        await state.set_state(FSMBooking.verification_form)
    else:
        await message.answer(text=f'–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yyyy', reply_markup=create_cancel_booking_kb())
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
        await state.set_state(FSMBooking.fill_bd)




# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è
# –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏ –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@router.message(StateFilter(FSMBooking.fill_last_name))
async def warning_fill_last_name(message: Message):
    await message.answer(
        text=f'–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –µ—â–µ —Ä–∞–∑', reply_markup=create_cancel_booking_kb())




# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–æ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
@router.message(StateFilter(FSMBooking.fill_bd))
async def process_fill_birthday(message: Message, state: FSMContext):
    if check_date(message.text):
        # C–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        birthday = message.text
        await state.update_data(birthday=birthday)
        db = await state.get_data()
        if 'phone' in db.keys():
            await message.answer(text=f'–ò–º—è:{db["first_name"]}\n–§–∞–º–∏–ª–∏—è:{db["last_name"]}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:{db["birthday"]}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:{db["phone"]}\n\n–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã –≤–µ—Ä–Ω–æ ?', reply_markup=create_yes_no_kb())
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–∫–µ—Ç—ã
            await state.set_state(FSMBooking.verification_form)
        else:
            await message.answer(text=f'–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 89997776655', reply_markup=create_cancel_booking_kb())
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            await state.set_state(FSMBooking.fill_phone)
    else:
        await message.answer(text=f'–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yyyy, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –µ—â–µ —Ä–∞–∑', reply_markup=create_cancel_booking_kb())




# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è
# –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@router.message(StateFilter(FSMBooking.fill_bd))
async def warning_fill_birthday(message: Message):
    await message.answer(text=f'–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yyyy, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –µ—â–µ —Ä–∞–∑', reply_markup=create_cancel_booking_kb())




# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(StateFilter(FSMBooking.fill_phone))
async def process_fill_phone(message: Message, state: FSMContext):
    if check_phone(message.text):
        # C–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ø–∞–º—è—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        phone = message.text
        await state.update_data(phone=phone)
        db = await state.get_data()
        await message.answer(text=f'–ò–º—è: {db["first_name"]}\n–§–∞–º–∏–ª–∏—è: {db["last_name"]}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {db["birthday"]}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {db["phone"]}\n\n–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã –≤–µ—Ä–Ω–æ ?', reply_markup=create_yes_no_kb())
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–∫–µ—Ç—ã
        await state.set_state(FSMBooking.verification_form)
    else:
        await message.answer(text=f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–Ω–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 89997776655, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –µ—â–µ —Ä–∞–∑', reply_markup=create_cancel_booking_kb())




# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è
# –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@router.message(StateFilter(FSMBooking.fill_phone))
async def warning_fill_phone(message: Message):
    await message.answer(text=f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–Ω–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 89997776655, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –µ—â–µ —Ä–∞–∑', reply_markup=create_cancel_booking_kb())




# —ç—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–¥–∞" –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
# –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–æ–ª–∏–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–ª–∞—Ç–æ–π
@router.callback_query(Text(text='yes'), StateFilter(FSMBooking.verification_form))
async def process_yes_button(callback: CallbackQuery, state: FSMContext, bot: Bot):
    # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db = await state.get_data()
    insert_user(db['user_id'], db['first_name'], db['last_name'], db['birthday'], db['phone'])
    user = select_one_user(db['user_id'])
    await callback.message.delete()
    await callback.message.answer(f'–ó–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏üôÇ', parse_mode='HTML')
    for id in config.tg_bot.admin_ids:
        await bot.send_message(id, f'<b>{user["first_name"]} {user["last_name"]}</b> –æ—Å—Ç–∞–≤–∏–ª(–∞) –∑–∞—è–≤–∫—É –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∏–∫–∞ {db["date"]} –Ω–∞ {db["guest"]} –≥–æ—Å—Ç–µ–π\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user["phone"]}\n–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user["id"]}', parse_mode='HTML')
    await state.clear()



# —ç—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–µ—Ç" –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
# –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π
@router.callback_query(Text(text='no'), StateFilter(FSMBooking.verification_form))
async def process_yes_button(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n1 - –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è;\n2 - –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é;\n3 - –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è;\n4 - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞;', reply_markup=create_cancel_booking_kb())
    await state.set_state(FSMBooking.section_choosing)



# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è
# –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–∫–µ—Ç—ã –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@router.message(StateFilter(FSMBooking.verification_form))
async def warning_verification_form(message: Message):
    await message.answer(text=f'–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–∞/–Ω–µ—Ç', reply_markup=create_cancel_booking_kb())



# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–∞–∑–¥–µ–ª–∞, –≤ –∫–æ—Ç—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
@router.message(StateFilter(FSMBooking.section_choosing), lambda x: x.text.isdigit() and 1 <= int(x.text) <= 4)
async def process_fill_phone(message: Message, state: FSMContext):
    db = await state.get_data()
    if int(message.text) == 1:
        await message.answer(f'–¢–µ–∫—É—â–µ–µ –∏–º—è: {db["first_name"]}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è', reply_markup=create_cancel_booking_kb())
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
        await state.set_state(FSMBooking.fill_first_name)
    elif int(message.text) == 2:
        await message.answer(f'–¢–µ–∫—É—â–∞—è —Ñ–∞–º–∏–ª–∏—è: {db["last_name"]}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é', reply_markup=create_cancel_booking_kb())
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏
        await state.set_state(FSMBooking.fill_last_name)
    elif int(message.text) == 3:
        await message.answer(f'–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {db["birthday"]}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ–º–∞—Ç–µ dd.mm.yyyy', reply_markup=create_cancel_booking_kb())
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
        await state.set_state(FSMBooking.fill_bd)
    elif int(message.text) == 4:
        await message.answer(f'–¢–µ–∫—É—â—É–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {db["phone"]}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=create_cancel_booking_kb())
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await state.set_state(FSMBooking.fill_phone)




# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è
# –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@router.message(StateFilter(FSMBooking.section_choosing))
async def warning_fill_phone(message: Message):
    await message.answer(text=f'–î–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ 4', reply_markup=create_cancel_booking_kb())






                                    # –§–£–ù–ö–¶–ò–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ë–†–û–ù–ò –°–¢–û–õ–ò–ö–ê






class FSMBookingTable(StatesGroup):
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–∞ State, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    # –ø–µ—Ä–µ—á–∏—Å–ª—è—è –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è
    # –±–æ—Ç –≤ —Ä–∞–∑–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    add_booking = State()       # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è



# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥—ã /addbooking
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —á–∞—Ç –ø—Ä–∞–≤–∏–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏ —Å—Ç–æ–ª–∏–∫–∞
@router.message(Command(commands='addbooking'), StateFilter(default_state), IsAdmin(config.tg_bot.admin_ids))
async def process_addevent_command(message: Message, state: FSMContext):
    await message.answer(text=LEXICON['addbooking'], reply_markup=create_cancel_addbooking_kb())
    await state.set_state(FSMBookingTable.add_booking)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ
@router.message(IsAdmin(config.tg_bot.admin_ids), StateFilter(FSMBookingTable.add_booking))
async def process_add_event(message: Message, state: FSMContext):
    add_list = [i.strip() for i in message.text.split(';')]
    if len(add_list) == 3:
        error = 0
        if not add_list[0].isdigit():
            await message.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º', reply_markup=create_cancel_addbooking_kb())
            error += 1
        if not check_date(add_list[1]):
            await message.answer(f'–î–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ –≤ –≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\ndd.mm.yyyy', reply_markup=create_cancel_addbooking_kb())
            error += 1
        user_id = select_all_ids()
        if int(add_list[2]) not in user_id:
            await message.answer('–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∫–∞–∑–∞–Ω –Ω–µ –≤–µ—Ä–Ω–æ', reply_markup=create_cancel_addbooking_kb())
            error += 1
        if error == 0:
            user = select_user(add_list[2])
            insert_booking_table(user['first_name'], user['last_name'], add_list[0], add_list[1], user['phone'])
            await message.answer('–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ')
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
            await state.clear()
    else:
        await message.answer(f'–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã\n'
                             f'–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å ; –≤ –∫–æ–Ω—Ü–µ –æ–¥–Ω–æ–≥–æ –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤ –∏–ª–∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∏—à–Ω–∏–π –∑–Ω–∞–∫ ;\n'
                             f'–°—Ä–∞–≤–Ω–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —à–∞–±–ª–æ–Ω–æ–º –∏ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –µ—â–µ —Ä–∞–∑\n\n',
                             reply_markup=create_cancel_addbooking_kb())


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è
# –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@router.message(StateFilter(FSMBookingTable.add_booking))
async def warning_addbooking(message: Message):
    await message.answer(text=f'–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ —à–∞–±–ª–æ–Ω—É', reply_markup=create_cancel_addbooking_kb())


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
# –∏ –æ—Ç–º–µ–Ω—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
@router.callback_query(Text(text='cancel_addbooking'), StateFilter(FSMBookingTable))
async def process_cancel_press(callback: CallbackQuery, state: FSMContext):
    photo = URLInputFile(url=LEXICON['menu_photo'])
    await callback.message.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ')
    await callback.message.delete()
    await callback.message.answer_photo(
        photo=photo,
        reply_markup=create_menu_kb(),
        parse_mode='HTML')
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.clear()





                                # –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Å—Ç–æ–ª–∏–∫–æ–≤




class FSMShowBooking(StatesGroup):
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–∞ State, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    # –ø–µ—Ä–µ—á–∏—Å–ª—è—è –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è
    # –±–æ—Ç –≤ —Ä–∞–∑–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    date_choosing = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã



# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä"
# –∏ –æ—Ç–º–µ–Ω—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
@router.callback_query(Text(text='cancel_show'), StateFilter(FSMShowBooking))
async def process_cancel_press(callback: CallbackQuery, state: FSMContext):
    photo = URLInputFile(url=LEXICON['menu_photo'])
    await callback.message.answer('–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Å—Ç–æ–ª–∏–∫–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω')
    await callback.message.delete()
    await callback.message.answer_photo(
        photo=photo,
        reply_markup=create_menu_kb(),
        parse_mode='HTML')
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.clear()



# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥—ã /showbooking
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —á–∞—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±—Ä–æ–Ω–∏
@router.message(Command(commands='showbooking'), StateFilter(default_state), IsAdmin(config.tg_bot.admin_ids))
async def process_showbooking_command(message: Message, state: FSMContext):
    date_list = date_func()
    await message.answer('–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±—Ä–æ–Ω–∏:', reply_markup=create_date_kb_2(date_list))
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    await state.set_state(FSMShowBooking.date_choosing)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è
# –≤—ã–±–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@router.message(StateFilter(FSMShowBooking))
async def warning_show_booking(message: Message):
    await message.answer(text=f'–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–∏ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä"', reply_markup=create_cancel_show_kb())



# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–æ–π
# –≤–æ –≤—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞—Ç—ã –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
@router.callback_query(Text(text=['date_1', 'date_2', 'date_3', 'date_4', 'date_5', 'date_6', 'date_7']),
                        StateFilter(FSMShowBooking.date_choosing))
async def process_date_press(callback: CallbackQuery, state: FSMContext):
    date = callback.message.reply_markup.inline_keyboard[int(callback.data.split("_")[1]) - 1][0].text
    booking_table_list = []
    all_booking_table = select_booking_table(date)
    num = 1
    if len(all_booking_table) != 0:
        for book in all_booking_table:
            booking_table_list.append(f'{num}) –ò–º—è: {book["first_name"]}\n–§–∞–º–∏–ª–∏—è: {book["last_name"]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: {book["guest"]}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {book["phone"]}')
            num += 1
        all_booking = f'\n\n'.join(booking_table_list)
        await callback.message.answer(f'–ù–∞ {date} –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ —Å—Ç–æ–ª–∏–∫–∏:\n\n{all_booking}', reply_markup=create_backword_menu_kb())
        await state.clear()
    else:
        await callback.message.answer(f'–ù–∞ {date} —Å—Ç–æ–ª–∏–∫–∏ –Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏', reply_markup=create_backword_menu_kb())
        await state.clear()





                                 # –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∫–ª—É–±–Ω—ã—Ö –∫–∞—Ä—Ç






class FSMCard(StatesGroup):
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–∞ State, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    # –ø–µ—Ä–µ—á–∏—Å–ª—è—è –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è
    # –±–æ—Ç –≤ —Ä–∞–∑–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    add_card = State()       # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
    delete_card = State()    # –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã"
# –∏ –æ—Ç–º–µ–Ω—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏–∫–∞
@router.callback_query(Text(text='cancel_card'), StateFilter(FSMCard.add_card))
async def process_cancel_press(callback: CallbackQuery, state: FSMContext):
    photo = URLInputFile(url=LEXICON['menu_photo'])
    await callback.message.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ')
    await callback.message.delete()
    await callback.message.answer_photo(
        photo=photo,
        reply_markup=create_menu_kb(),
        parse_mode='HTML')
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.clear()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥—ã /addcard
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —á–∞—Ç –ø—Ä–∞–≤–∏–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
@router.message(Command(commands='addcard'), StateFilter(default_state), IsAdmin(config.tg_bot.admin_ids))
async def process_addcard_command(message: Message, state: FSMContext):
    await message.answer(text=LEXICON['addcard'], reply_markup=create_cancel_card_kb())
    await state.set_state(FSMCard.add_card)







# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∏–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã
@router.message(IsAdmin(config.tg_bot.admin_ids), StateFilter(FSMCard.add_card))
async def process_add_event(message: Message, state: FSMContext):
    add_list = [i.strip() for i in message.text.split(';')]
    if len(add_list) == 5:
        error = 0
        if not add_list[0].isalpha():
            await message.answer('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏–º—è', reply_markup=create_cancel_card_kb())
            error += 1
        if not add_list[1].isalpha():
            await message.answer('–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤, –∏—Å–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–º–∏–ª–∏—é', reply_markup=create_cancel_card_kb())
            error += 1
        if not check_date(add_list[2]):
            await message.answer(f'–î–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ –≤ –≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\ndd.mm.yyyy', reply_markup=create_cancel_card_kb())
            error += 1
        if not check_phone(add_list[3]):
            await message.answer(f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–≤–µ–¥–µ–Ω –Ω–µ –≤ –≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n89997776655', reply_markup=create_cancel_card_kb())
            error += 1
        if not add_list[4].isdigit():
            await message.answer('–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã', reply_markup=create_cancel_card_kb())
            error += 1
        cards = select_cards_number()
        if add_list[4] in cards:
            await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –∫–∞—Ä—Ç—ã —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã', reply_markup=create_cancel_card_kb())
            error += 1
        if error == 0:
            insert_card(add_list[0], add_list[1], add_list[2], add_list[3], add_list[4])
            await message.answer('–í–ª–∞–¥–µ–ª–µ—Ü –∫–ª—É–±–Ω–æ–π –∫–∞—Ä—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=create_backword_menu_kb())
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
            await state.clear()
    else:
        await message.answer(f'–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã\n'
                             f'–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å ; –≤ –∫–æ–Ω—Ü–µ –æ–¥–Ω–æ–≥–æ –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤ –∏–ª–∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∏—à–Ω–∏–π –∑–Ω–∞–∫ ;\n'
                             f'–°—Ä–∞–≤–Ω–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —à–∞–±–ª–æ–Ω–æ–º –∏ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –µ—â–µ —Ä–∞–∑', reply_markup=create_cancel_card_kb())







                                 # –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∫–ª—É–±–Ω—ã—Ö –∫–∞—Ä—Ç





# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥—ã /showcard
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —á–∞—Ç —Å–ø–∏—Å–æ–∫ —Å–æ –≤—Å–µ–º–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º–∏ –∫–∞—Ä—Ç
@router.message(Command(commands='showcard'), StateFilter(default_state), IsAdmin(config.tg_bot.admin_ids))
async def process_addcard_command(message: Message, state: FSMContext):
    card_list = []
    cards = select_all_cards()
    cards = sorted(cards, key=lambda x: x['card'])
    num = 1
    for card in cards:
        card_list.append(f'{num}) –ù–æ–º–µ—Ä –∫–ª—É–±–Ω–æ–π –∫–∞—Ä—Ç—ã: {card["card"]}\n–ò–º—è: {card["first_name"]}\n–§–∞–º–∏–ª–∏—è: {card["last_name"]}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {card["birthday"]}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {card["phone"]}')
        num += 1
    if len(card_list) <= 30:
        all_card = f'\n\n'.join(card_list)
        await message.answer(f'{all_card}', reply_markup=create_backword_menu_kb())
    elif len(card_list) >= 31 and len(card_list) <= 60:
        all_card_1 = f'\n\n'.join(card_list[0:30])
        all_card_2 = f'\n\n'.join(card_list[30:])
        await message.answer(f'{all_card_1}')
        await message.answer(f'{all_card_2}', reply_markup=create_backword_menu_kb())
    elif len(card_list) >= 61 and len(card_list) <= 90:
        all_card_1 = f'\n\n'.join(card_list[0:30])
        all_card_2 = f'\n\n'.join(card_list[30:60])
        all_card_3 = f'\n\n'.join(card_list[60:])
        await message.answer(f'{all_card_1}')
        await message.answer(f'{all_card_2}')
        await message.answer(f'{all_card_3}', reply_markup=create_backword_menu_kb())
    elif len(card_list) >= 91 and len(card_list) <= 120:
        all_card_1 = f'\n\n'.join(card_list[0:30])
        all_card_2 = f'\n\n'.join(card_list[30:60])
        all_card_3 = f'\n\n'.join(card_list[60:90])
        all_card_4 = f'\n\n'.join(card_list[90:])
        await message.answer(f'{all_card_1}')
        await message.answer(f'{all_card_2}')
        await message.answer(f'{all_card_3}')
        await message.answer(f'{all_card_4}', reply_markup=create_backword_menu_kb())
    elif len(card_list) >= 121 and len(card_list) <= 150:
        all_card_1 = f'\n\n'.join(card_list[0:30])
        all_card_2 = f'\n\n'.join(card_list[30:60])
        all_card_3 = f'\n\n'.join(card_list[60:90])
        all_card_4 = f'\n\n'.join(card_list[90:120])
        all_card_5 = f'\n\n'.join(card_list[120:])
        await message.answer(f'{all_card_1}')
        await message.answer(f'{all_card_2}')
        await message.answer(f'{all_card_3}')
        await message.answer(f'{all_card_4}')
        await message.answer(f'{all_card_5}', reply_markup=create_backword_menu_kb())
    elif len(card_list) >= 151 and len(card_list) <= 180:
        all_card_1 = f'\n\n'.join(card_list[0:30])
        all_card_2 = f'\n\n'.join(card_list[30:60])
        all_card_3 = f'\n\n'.join(card_list[60:90])
        all_card_4 = f'\n\n'.join(card_list[90:120])
        all_card_5 = f'\n\n'.join(card_list[120:150])
        all_card_6 = f'\n\n'.join(card_list[150:])
        await message.answer(f'{all_card_1}')
        await message.answer(f'{all_card_2}')
        await message.answer(f'{all_card_3}')
        await message.answer(f'{all_card_4}')
        await message.answer(f'{all_card_5}')
        await message.answer(f'{all_card_6}', reply_markup=create_backword_menu_kb())






                                 # –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∫–ª—É–±–Ω—ã—Ö –∫–∞—Ä—Ç





# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã"
# –∏ –æ—Ç–º–µ–Ω—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏–∫–∞
@router.callback_query(Text(text='cancel_card'), StateFilter(FSMCard.delete_card))
async def process_cancel_press(callback: CallbackQuery, state: FSMContext):
    photo = URLInputFile(url=LEXICON['menu_photo'])
    await callback.message.answer('–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ')
    await callback.message.delete()
    await callback.message.answer_photo(
        photo=photo,
        reply_markup=create_menu_kb(),
        parse_mode='HTML')
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.clear()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥—ã /deletecard
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —á–∞—Ç –ø—Ä–∞–≤–∏–ª–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
@router.message(Command(commands='deletecard'), StateFilter(default_state), IsAdmin(config.tg_bot.admin_ids))
async def process_deletecard_command(message: Message, state: FSMContext):
    text = '–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã'
    await message.answer(text=text, reply_markup=create_cancel_delete_card_kb())
    await state.set_state(FSMCard.delete_card)



# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã
@router.message(IsAdmin(config.tg_bot.admin_ids), StateFilter(FSMCard.delete_card),
lambda x: x.text.isdigit())
async def process_delete_card(message: Message, state: FSMContext):
    cards_num = []
    cards = select_all_cards()
    for card in cards:
        cards_num.append(card['card'])
    if int(message.text) in cards_num:
        try:
            delete_card(message.text)
            await message.answer('–í–ª–∞–¥–µ–ª–µ—Ü –∫–ª—É–±–Ω–æ–π –∫–∞—Ä—Ç—ã —É–¥–∞–ª–µ–Ω', reply_markup=create_backword_menu_kb())
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
            await state.clear()
        except:
            print('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–ª—É–±–Ω–æ–π –∫–∞—Ä—Ç—ã')
    else:
        await message.answer(f'–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –∫–∞—Ä—Ç—ã —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç—É\n', reply_markup=create_cancel_delete_card_kb())


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è
# –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@router.message(StateFilter(FSMCard.delete_card))
async def warning_delete_card(message: Message):
    await message.answer(text=f'–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã', reply_markup=create_cancel_delete_card_kb())




                                 # –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∞—Ñ–∏—à–∏







class FSMNewsletter(StatesGroup):
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–∞ State, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    # –ø–µ—Ä–µ—á–∏—Å–ª—è—è –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è
    # –±–æ—Ç –≤ —Ä–∞–∑–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    create_text = State()    # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    add_photo = State()     # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ
    verification_newslatter = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"
# –∏ –æ—Ç–º–µ–Ω—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
@router.callback_query(Text(text='cancel_newslatter'), StateFilter(FSMNewsletter))
async def process_cancel_press(callback: CallbackQuery, state: FSMContext):
    photo = URLInputFile(url=LEXICON['menu_photo'])
    await callback.message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')
    await callback.message.delete()
    await callback.message.answer_photo(
        photo=photo,
        reply_markup=create_menu_kb(),
        parse_mode='HTML')
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.clear()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥—ã /sendnewsletter
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —á–∞—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@router.message(IsAdmin(config.tg_bot.admin_ids), Command(commands='sendnewsletter'), StateFilter(default_state))
async def process_sendnewsletter_command(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=create_cancel_newslatter_kb())
    await state.set_state(FSMNewsletter.create_text)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ
@router.message(IsAdmin(config.tg_bot.admin_ids), StateFilter(FSMNewsletter.create_text))
async def process_create_text_newsletter(message: Message, state: FSMContext):
    text = message.text
    await state.update_data(text=text)
    db = await state.get_data()
    if 'photo' in db.keys():
        await message.answer(f'–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞, –≤–≤–µ–¥–∏—Ç–µ:\n\n1 - —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç;\n2 - —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç;\n3 - —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ', reply_markup=create_cancel_newslatter_kb())
        await message.answer_photo(photo=db['photo'], caption=db['text'])
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
        await state.set_state(FSMNewsletter.verification_newslatter)
    else:
        await message.answer('–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=create_cancel_newslatter_kb())
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ
        await state.set_state(FSMNewsletter.add_photo)



# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–æ—Ç–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–æ–π –∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏/–∏–∑–º–µ–Ω–µ–Ω–∏—è
@router.message(IsAdmin(config.tg_bot.admin_ids), StateFilter(FSMNewsletter.add_photo))
async def process_create_text_newsletter(message: Message, state: FSMContext):
    if message.photo:
        db = await state.get_data()
        photo = message.photo[0].file_id
        await message.answer(f'–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞, –≤–≤–µ–¥–∏—Ç–µ:\n\n1 - —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç;\n2 - —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç;\n3 - —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ', reply_markup=create_cancel_newslatter_kb())
        await message.answer_photo(photo=photo, caption=db['text'])
        await state.update_data(photo=photo)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
        await state.set_state(FSMNewsletter.verification_newslatter)
    elif message.video:
        db = await state.get_data()
        video = message.video.file_id
        await message.answer(f'–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞, –≤–≤–µ–¥–∏—Ç–µ:\n\n1 - —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç;\n2 - —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç;\n3 - —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ', reply_markup=create_cancel_newslatter_kb())
        await message.answer_video(video=video, caption=db['text'])
        await state.update_data(video=video)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
        await state.set_state(FSMNewsletter.verification_newslatter)
    else:
        await message.answer('–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=create_cancel_newslatter_kb())



# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–∞–∑–¥–µ–ª–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
@router.message(StateFilter(FSMNewsletter.verification_newslatter), lambda x: x.text.isdigit() and 1 <= int(x.text) <= 3)
async def process_fill_phone(message: Message, state: FSMContext, bot: Bot):
    db = await state.get_data()
    if int(message.text) == 1:
        db = await state.get_data()
        users_id = select_users_id()
        for id in users_id:
            try:
                if 'photo' in db.keys():
                    await bot.send_photo(chat_id=id, photo=db['photo'], caption=db['text'])
                elif 'video' in db.keys():
                    await bot.send_video(chat_id=id, video=db['video'], caption=db['text'])
            except:
                print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞ id - {id}')
        await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', reply_markup=create_backword_menu_kb())
        await state.clear()
    elif int(message.text) == 2:
        await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=create_cancel_newslatter_kb())
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
        await state.set_state(FSMNewsletter.create_text)
    elif int(message.text) == 3:
        await message.answer(f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=create_cancel_newslatter_kb())
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ
        await state.set_state(FSMNewsletter.add_photo)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è
# –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@router.message(StateFilter(FSMNewsletter.verification_newslatter))
async def warning_fill_phone(message: Message):
    await message.answer(text=f'–î–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ 3', reply_markup=create_cancel_newslatter_kb())





                                 # –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è





class FSMSurvey(StatesGroup):
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–∞ State, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    # –ø–µ—Ä–µ—á–∏—Å–ª—è—è –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è
    # –±–æ—Ç –≤ —Ä–∞–∑–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    question_1 = State()    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    question_2 = State()    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
    question_3 = State()    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å
    question_4 = State()    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —á–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–æ–ø—Ä–æ—Å
    question_5 = State()    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—è—Ç—ã–π –≤–æ–ø—Ä–æ—Å


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"
# –∏ –æ—Ç–º–µ–Ω—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
@router.callback_query(Text(text='cancel_survey'), StateFilter(FSMSurvey, default_state))
async def process_cancel_press(callback: CallbackQuery, state: FSMContext):
    photo = URLInputFile(url=LEXICON['menu_photo'])
    await callback.message.answer('–û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω–µ–Ω')
    await callback.message.delete()
    await callback.message.answer_photo(
        photo=photo,
        reply_markup=create_menu_kb(),
        parse_mode='HTML')
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.clear()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è
# –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@router.message(StateFilter(FSMSurvey))
async def warning_survey(message: Message):
    await message.answer(text=f'–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ', reply_markup=create_cancel_survey_kb())


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –æ—Ü–µ–Ω–∫–æ–π
# –≤–æ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
@router.callback_query(Text(text=['1', '2', '3', '4', '5']), StateFilter(default_state))
async def process_question_1_press(callback: CallbackQuery, state: FSMContext):
    question_1 = callback.data
    event_name = callback.message.text.split('"')
    await state.update_data(question_1=question_1, user_id=callback.from_user.id, event_name=event_name[1])
    await callback.message.delete()
    await callback.message.answer(f'–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∞–ª–∫–æ–≥–æ–ª—è:', reply_markup=create_question_2_kb())
    await state.set_state(FSMSurvey.question_2)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –æ—Ü–µ–Ω–∫–æ–π
# –≤–æ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
@router.callback_query(Text(text=['1', '2', '3', '4', '5', '6']), StateFilter(FSMSurvey.question_2))
async def process_question_1_press(callback: CallbackQuery, state: FSMContext):
    if callback.data == '6':
        question_2 = callback.message.reply_markup.inline_keyboard[1][0].text
    else:
        question_2 = callback.message.reply_markup.inline_keyboard[0][int(callback.data) - 1].text
    await state.update_data(question_2=question_2)
    await callback.message.delete()
    await callback.message.answer(f'–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–∞–ª—å—è–Ω–∞:', reply_markup=create_question_3_kb())
    await state.set_state(FSMSurvey.question_3)



# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –æ—Ü–µ–Ω–∫–æ–π
# –≤–æ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å
@router.callback_query(Text(text=['1', '2', '3', '4', '5', '6']), StateFilter(FSMSurvey.question_3))
async def process_question_1_press(callback: CallbackQuery, state: FSMContext):
    if callback.data == '6':
        question_3 = callback.message.reply_markup.inline_keyboard[1][0].text
    else:
        question_3 = callback.message.reply_markup.inline_keyboard[0][int(callback.data) - 1].text
    await state.update_data(question_3=question_3)
    await callback.message.delete()
    await callback.message.answer(f'–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞:', reply_markup=create_question_kb())
    await state.set_state(FSMSurvey.question_4)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –æ—Ü–µ–Ω–∫–æ–π
# –≤–æ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —á–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–æ–ø—Ä–æ—Å
@router.callback_query(Text(text=['1', '2', '3', '4', '5']), StateFilter(FSMSurvey.question_4))
async def process_question_1_press(callback: CallbackQuery, state: FSMContext):
    question_4 = callback.data
    await state.update_data(question_4=question_4)
    await callback.message.delete()
    await callback.message.answer(f'–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã –æ—Ö—Ä–∞–Ω—ã:', reply_markup=create_question_kb())
    await state.set_state(FSMSurvey.question_5)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –æ—Ü–µ–Ω–∫–æ–π
# –≤–æ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—è—Ç—ã–π –≤–æ–ø—Ä–æ—Å
@router.callback_query(Text(text=['1', '2', '3', '4', '5']), StateFilter(FSMSurvey.question_5))
async def process_question_1_press(callback: CallbackQuery, state: FSMContext):
    question_5 = callback.data
    db = await state.get_data()
    event_id = select_one_event_id(db['event_name'])
    user = select_one_user(db['user_id'])
    print(user)
    print(event_id)
    insert_survey(user['first_name'], user['last_name'], user['phone'], db['question_1'], db['question_2'], db['question_3'], db['question_4'], question_5, event_id)
    await callback.message.delete()
    await callback.message.answer(f'–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞, —Å –ø–æ–º–æ—â—å—é –≤–∞—Å –º—ã —Å—Ç–∞–Ω–æ–≤–∏–º—Å—è –ª—É—á—à–µ :)')
    await state.clear()






                                # –§–£–ù–ö–¶–ò–Ø –ü–†–û–°–ú–û–¢–†–ê –û–ü–†–û–°–ê









class FSMShowSurvey(StatesGroup):
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–∞ State, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    # –ø–µ—Ä–µ—á–∏—Å–ª—è—è –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è
    # –±–æ—Ç –≤ —Ä–∞–∑–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    event_choosing = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è



# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä"
# –∏ –æ—Ç–º–µ–Ω—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
@router.callback_query(Text(text='cancel_show'), StateFilter(FSMShowSurvey))
async def process_cancel_press(callback: CallbackQuery, state: FSMContext):
    photo = URLInputFile(url=LEXICON['menu_photo'])
    await callback.message.answer('–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω')
    await callback.message.delete()
    await callback.message.answer_photo(
        photo=photo,
        reply_markup=create_menu_kb(),
        parse_mode='HTML')
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.clear()



# —ç—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /showsurvey
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@router.message(Command(commands='showsurvey'), StateFilter(default_state), IsAdmin(config.tg_bot.admin_ids))
async def process_showsurvey_command(message: Message, state: FSMContext):
    events_list = []
    id_list = []
    num = 1
    events = select_all_events()
    if len(events) != 0:
        for event in events:
            try:
                if next_day_date_2() >= now_time(f'{event["date"]} 00:00'):
                    continue
                events_list.append(f'{num}) "{event["name"]}"\n{event["description"]}\n'
                            f'–î–∞—Ç–∞: {event["date"]}\n'
                            f'<b>–ö–û–î –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø üëâüèª {event["id"]}</b>')
                id_list.append(event["id"])
            except:
                print(f"–ü—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {Exception.__class__}")
            num += 1
        if len(events_list) == 0:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç—É –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.")
        else:
            if len(events_list) <= 20:
                events = f'\n\n'.join(events_list)
                text = f"<b>–í–´–ë–ï–†–ò–¢–ï –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ï</b>\n\n{events}\n\n<i>–ß–¢–û–ë–´ –í–´–ë–†–ê–¢–¨ –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ï –í–í–ï–î–ò–¢–ï –ö–û–î –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø</i>‚ùóÔ∏è"
                await message.answer(text=text, reply_markup=create_cancel_show_kb(),parse_mode='HTML')
            elif len(events_list) >= 21 and len(events_list) <= 40:
                events_1 = f'\n\n'.join(events_list[0:20])
                events_2 = f'\n\n'.join(events_list[20:])
                text_1 = f"<b>–í–´–ë–ï–†–ò–¢–ï –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ï</b>\n\n{events_1}"
                text_2 = f"{events_2}\n\n<i>–ß–¢–û–ë–´ –í–´–ë–†–ê–¢–¨ –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ï –í–í–ï–î–ò–¢–ï –ö–û–î –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø</i>‚ùóÔ∏è"
                await message.answer(text=text_1,parse_mode='HTML')
                await message.answer(text=text_2, reply_markup=create_cancel_show_kb(),parse_mode='HTML')
            elif len(events_list) >= 41 and len(events_list) <= 60:
                events_1 = f'\n\n'.join(events_list[0:20])
                events_2 = f'\n\n'.join(events_list[20:40])
                events_3 = f'\n\n'.join(events_list[40:])
                text_1 = f"<b>–í–´–ë–ï–†–ò–¢–ï –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ï</b>\n\n{events_1}"
                text_2 = f"{events_2}"
                text_3 = f"{events_3}\n\n<i>–ß–¢–û–ë–´ –í–´–ë–†–ê–¢–¨ –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ï –í–í–ï–î–ò–¢–ï –ö–û–î –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø</i>‚ùóÔ∏è"
                await message.answer(text=text_1, parse_mode='HTML')
                await message.answer(text=text_2, parse_mode='HTML')
                await message.answer(text=text_3, reply_markup=create_cancel_show_kb(),parse_mode='HTML')
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            await state.set_state(FSMShowSurvey.event_choosing)
            await state.update_data(id_list=id_list)
    else:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.")




# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@router.message(StateFilter(FSMShowSurvey.event_choosing), lambda x: x.text.isdigit())
async def process_event_choosing(message: Message, state: FSMContext):
    db = await state.get_data()
    id_list = db['id_list']
    survey_list = []
    if int(message.text) in id_list:
        event = select_one_event(message.text)
        survey_all = select_survey(message.text)
        print(survey_all)
        num = 1
        for survey in survey_all:
            survey_list.append(f'{num}) <b>–ò–º—è</b>: {survey["first_name"]}\n<b>–§–∞–º–∏–ª–∏—è</b>: {survey["last_name"]}\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>: {survey["phone"]}\n<b>–ö–∞—á–µ—Å—Ç–≤–æ –º—É–∑—ã–∫–∏</b>: {survey["question_1"]}\n<b>–ö–∞—á–µ—Å—Ç–≤–æ –∞–ª–∫–æ–≥–æ–ª—è</b>: {survey["question_2"]}\n<b>–ö–∞—á–µ—Å—Ç–≤–æ –∫–∞–ª—å—è–Ω–∞</b>: {survey["question_3"]}\n<b>–ö–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞</b>: {survey["question_4"]}\n<b>–ö–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã –æ—Ö—Ä–∞–Ω—ã</b>: {survey["question_5"]}\n')
            num += 1
        if len(survey_list) != 0:
            if len(survey_list) <= 15:
                final_list = f'\n\n'.join(survey_list)
                await message.answer(f'–ù–∞ {event["name"]} –ø—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å:\n\n{final_list}', reply_markup=create_backword_menu_kb(), parse_mode='HTML')
                await state.clear()
            elif len(survey_list) >= 15 and len(survey_list) <= 30:
                final_list_1 = f'\n\n'.join(survey_list[0:15])
                final_list_2 = f'\n\n'.join(survey_list[15:])
                await message.answer(f'–ù–∞ {event["name"]} –ø—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å:\n\n{final_list_1}', parse_mode='HTML')
                await message.answer(f'{final_list_2}', reply_markup=create_backword_menu_kb(), parse_mode='HTML')
                await state.clear()
            elif len(survey_list) >= 30 and len(survey_list) <= 45:
                final_list_1 = f'\n\n'.join(survey_list[0:15])
                final_list_2 = f'\n\n'.join(survey_list[15:30])
                final_list_3 = f'\n\n'.join(survey_list[30:])
                await message.answer(f'–ù–∞ {event["name"]} –ø—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å:\n\n{final_list_1}', parse_mode='HTML')
                await message.answer(f'{final_list_2}', parse_mode='HTML')
                await message.answer(f'{final_list_3}', reply_markup=create_backword_menu_kb(), parse_mode='HTML')
                await state.clear()
            elif len(survey_list) >= 45 and len(survey_list) <= 60:
                final_list_1 = f'\n\n'.join(survey_list[0:15])
                final_list_2 = f'\n\n'.join(survey_list[15:30])
                final_list_3 = f'\n\n'.join(survey_list[30:45])
                final_list_4 = f'\n\n'.join(survey_list[45:])
                await message.answer(f'–ù–∞ {event["name"]} –ø—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å:\n\n{final_list_1}', parse_mode='HTML')
                await message.answer(f'{final_list_2}', parse_mode='HTML')
                await message.answer(f'{final_list_3}', parse_mode='HTML')
                await message.answer(f'{final_list_4}', reply_markup=create_backword_menu_kb(), parse_mode='HTML')
                await state.clear()
        else:
            await message.answer(f'–ù–∞ "{event["name"]}" –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –æ–ø—Ä–æ—Å', reply_markup=create_backword_menu_kb())
            await state.clear()
    else:
        await message.answer(text=f'–í–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω—ã–π –∫–æ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup=create_cancel_show_kb())



# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è
# –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@router.message(StateFilter(FSMShowSurvey.event_choosing))
async def warning_show_survey(message: Message):
    await message.answer(text=f'–î–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', reply_markup=create_cancel_show_kb())
